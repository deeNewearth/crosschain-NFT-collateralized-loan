/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type LoanGiven = ContractEventLog<{
  alexWallet: string;
  bobsWallet: string;
  status: string;
  contractId: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;

export interface CashSide extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): CashSide;
  clone(): CashSide;
  methods: {
    askForLoan(
      _contractId: string | number[],
      _secret1Hash: string | number[],
      _loanAmount: number | string | BN,
      _loanInterest: number | string | BN,
      _lockedTill: number | string | BN
    ): NonPayableTransactionObject<void>;

    computeContractId(
      _alexWallet: string,
      _asset: string,
      _tokenId: number | string | BN
    ): NonPayableTransactionObject<string>;

    getContract1(_contractId: string | number[]): NonPayableTransactionObject<{
      assetContract: string;
      tokenId: string;
      loanAmount: string;
      loanInterest: string;
      lenderDeposit: string;
      bobsWalet: string;
      alexWallet: string;
      status: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: string;
    }>;

    getContract2(_contractId: string | number[]): NonPayableTransactionObject<{
      secret1Hash: string;
      secret2Hash: string;
      preimage1: string;
      preimage2: string;
      reqTill: string;
      acceptTill: string;
      lockedTill: string;
      releaseTill: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: string;
    }>;

    giveLoan(
      _contractId: string | number[],
      _secret2Hash: string | number[]
    ): PayableTransactionObject<void>;

    noTakersForLoan(): NonPayableTransactionObject<void>;

    owner(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;
  };
  events: {
    LoanGiven(cb?: Callback<LoanGiven>): EventEmitter;
    LoanGiven(options?: EventOptions, cb?: Callback<LoanGiven>): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "LoanGiven", cb: Callback<LoanGiven>): void;
  once(
    event: "LoanGiven",
    options: EventOptions,
    cb: Callback<LoanGiven>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;
}
